 # 请将你实现flight_booking数据库的语句写在下方：
drop table if exists "user" cascade;
create table "user"(
	user_id int primary key,
	firstname varchar(50) not null,
	lastname varchar(50) not null,
	dob date not null,
	sex char(1) not null,
	email varchar(50) default '',
	phone varchar(30) default '',
	username varchar(20) not null,
	password char(32) not null,
	admin_tag tinyint not null default 0
);
create unique index i_unq_username 
on "user"(username);
drop table if exists passenger cascade;
create table passenger(
    passenger_id int primary key,
    id char(18) not null,
    firstname varchar(50) not null,
    lastname varchar(50) not null,
    mail varchar(50) default '',
    phone varchar(20) not null,
    sex char(1) not null,
    dob timestamp
);
create unique index i_unq_passenger_id on passenger(id);

drop table if exists airport cascade;
create table airport (
    airport_id smallint primary key,
    iata char(3) not null,
    icao char(4) not null,
    name varchar(50) not null,
    city varchar(50) default '',
    country varchar(50) default '',
    latitude decimal(11, 8) default 0,
    longitude decimal(11, 8) default 0
);
create index i_name on airport(name);
create unique index i_unq_airport_iata on airport(iata);
create unique index i_unq_airport_icao on airport(icao);

drop table if exists airline cascade;
create table airline (
    airline_id int primary key,
    name varchar(30) not null,
    iata char(2) not null,
    airport_id smallint not null,
	constraint FK_airline_airport foreign key (airport_id) references airport(airport_id)
);
create index i_airport_id on airline using btree(airport_id);
create unique index i_unq_iata_line on airline using btree(iata);


drop table if exists airplane cascade;
create table airplane(
    airplane_id int primary key,
    type varchar(50) not null,
    capacity smallint not null,
    identifier varchar(50) not null,
    airline_id int not null,
	constraint FK_airplane_airline foreign key (airline_id) references airline(airline_id)
);
create index i_airline_id on airplane using btree(airline_id);

drop table if exists flightschedule cascade;
create table flightschedule (
    flight_no char(8) primary key,
    departure timestamp not null,
    arrival timestamp not null,
    duration smallint not null,
    monday tinyint default 0,
    tuesday tinyint default 0,
    wednesday tinyint default 0,
    thursday tinyint default 0,
    friday tinyint default 0,
    saturday tinyint default 0,
    sunday tinyint default 0,
    airline_id int not null,
	"from" smallint not null,
	"to" smallint not null,
    constraint FK_flightschedule_airline foreign key (airline_id) references airline(airline_id),
	constraint FK_flightschedule_from foreign key ("from") references airport(airport_id),
	constraint FK_flightschedule_to foreign key ("to") references airport(airport_id)
);
create index i_flightschedule_airline_id on flightschedule using btree(airline_id);
create index i_flightschedule_from on flightschedule using btree("from");
create index i_flightschedule_to on flightschedule using btree("to");

drop table if exists flight cascade;
create table flight (
    flight_id int primary key,
    departure timestamp not null,
    arrivals timestamp not null,
    duration smallint not null,
    flight_no char(8) not null,
    airplane_id int not null, --执飞飞机
    airline_id int not null,  --执飞航线
	"from" smallint not null,
	"to" smallint not null,
    constraint FK_flight_flight_no foreign key (flight_no) references flightschedule(flight_no),
    constraint FK_flight_airplane foreign key (airplane_id) references airplane(airplane_id),
    constraint FK_flight_airline foreign key (airline_id) references airline(airline_id),
	constraint FK_flight_from foreign key ("from") references airport(airport_id),
	constraint FK_flight_to foreign key ("to") references airport(airport_id)
);
create index i_flight_flight_no on flight using btree(flight_no);
create index i_flight_airline_id on flight using btree(airline_id);
create index i_flight_arrival on flight using btree(arrivals);
create index i_flight_departure on flight using btree(departure);
create index i_flight_from on flight using btree("from");
create index i_flight_to on flight using btree("to");

drop table if exists ticket cascade;
create table ticket(
	ticket_id int primary key,
	seat char(4) default '',
	price decimal(10,2) not null,
    user_id int not null,
    passenger_id int not null,
	flight_id int not null,
    constraint FK_ticket_user foreign key (user_id) references "user"(user_id),
    constraint FK_ticket_passenger foreign key (passenger_id) references passenger(passenger_id),
	constraint FK_ticket_flight foreign key (flight_id) references flight(flight_id)
);
create index i_ticket_user_id on ticket using btree(user_id);
create index i_ticket_passenger_id on ticket using btree(passenger_id);
create index i_ticket_flight_id on ticket using btree(flight_id);

